swagger: "2.0"
info:
  title: sta access manager
  description: 入退室管理アプリAPI
  version: 0.0.0
  termsOfService: "https://github.com/ikkyu-3/sta_access_manager"
host: hostname
basePath: "/${self:provider.stage}"
schemes:
- "https"
tags:
  - name: User
    description: サービス利用者
  - name: Users
    description: 全サービス利用者
  - name: CORS
    description: CORS support
paths:
  /user:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
    put:
      tags:
        - User
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "MODEL3cf170"
        required: true
        schema:
          $ref: "#/definitions/MODEL3cf170"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/MODELe54844"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ":"
            - - arn:aws:apigateway
              - !Ref AWS::Region
              - lambda:path/2015-03-31/functions/arn:aws:lambda
              - !Ref AWS::Region
              - !Ref AWS::AccountId
              - function:sam-server-putUser-${self:provider.stage}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
  /user/{cardId}:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
    get:
      tags:
      - User
      produces:
      - "application/json"
      parameters:
      - name: "cardId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/MODELee005e"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/MODEL1620d1"
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ":"
            - - arn:aws:apigateway
              - !Ref AWS::Region
              - lambda:path/2015-03-31/functions/arn:aws:lambda
              - !Ref AWS::Region
              - !Ref AWS::AccountId
              - function:sam-server-getUserStatus-${self:provider.stage}/invocations
        requestTemplates: when_no_match
        httpMethod: POST
        type: aws_proxy
  /user/{cardId}/entry:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
    put:
      tags:
      - User
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cardId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL066f11"
        required: true
        schema:
          $ref: "#/definitions/MODEL066f11"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/MODEL2fea2f"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ":"
            - - arn:aws:apigateway
              - !Ref AWS::Region
              - lambda:path/2015-03-31/functions/arn:aws:lambda
              - !Ref AWS::Region
              - !Ref AWS::AccountId
              - function:sam-server-putUserEntry-${self:provider.stage}/invocations
        requestTemplates: when_no_match
        httpMethod: POST
        type: aws_proxy
  /user/{cardId}/exit:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
    put:
      tags:
      - User
      produces:
      - "application/json"
      parameters:
      - name: "cardId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/MODEL4f91ba"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ":"
            - - arn:aws:apigateway
              - !Ref AWS::Region
              - lambda:path/2015-03-31/functions/arn:aws:lambda
              - !Ref AWS::Region
              - !Ref AWS::AccountId
              - function:sam-server-putUserExit-${self:provider.stage}/invocations
        requestTemplates: when_no_match
        httpMethod: POST
        type: aws_proxy
  /users:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
    get:
      tags:
      - Users
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfMODELf0e28e"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ":"
            - - arn:aws:apigateway
              - !Ref AWS::Region
              - lambda:path/2015-03-31/functions/arn:aws:lambda
              - !Ref AWS::Region
              - !Ref AWS::AccountId
              - function:sam-server-getUsers-${self:provider.stage}/invocations
        requestTemplates: when_no_match
        httpMethod: POST
        type: aws_proxy
definitions:
  MODEL1620d1:
    type: "object"
    properties:
      message:
        type: "string"
      exists:
        type: "boolean"
  ArrayOfMODELf0e28e:
    type: "array"
    items:
      type: "object"
      properties:
        userId:
          type: "string"
        name:
          type: "string"
        purpose:
          type: "string"
        isEntry:
          type: "boolean"
        entryTime:
          type: "string"
          format: "date-time"
        exitTime:
          type: "string"
          format: "date-time"
  MODELee005e:
    type: "object"
    properties:
      user:
        type: "object"
        properties:
          userId:
            type: "string"
          name:
            type: "string"
          purpose:
            type: "string"
          isEntry:
            type: "boolean"
          entryTime:
            type: "string"
          exitTime:
            type: "string"
  MODELe54844:
    type: "object"
    properties:
      message:
        type: "string"
  MODEL2fea2f:
    type: "object"
    properties:
      message:
        type: "string"
  MODEL066f11:
    type: "object"
    required:
    - "purpose"
    properties:
      purpose:
        type: "string"
  MODEL3cf170:
    type: "object"
    required:
    - "cardId"
    - "name"
    properties:
      userid:
        type: "string"
      name:
        type: "string"
      cardId:
        type: "string"
  Error:
    type: "object"
    properties:
      message:
        type: "string"
  MODEL4f91ba:
    type: "object"
    properties:
      message:
        type: "string"
